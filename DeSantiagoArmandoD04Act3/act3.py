# -*- coding: utf-8 -*-
"""Act3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HbB6RoT9LYpl2M2EUDKsDgSptmQmQB6T
"""

import time
import sys

class Proceso:
    def __init__(self, numero, nombre, operacion, datos, tiempo_maximo, numero_programa):
        self.numero = numero
        self.nombre = nombre
        self.operacion = operacion
        self.datos = datos
        self.tiempo_maximo = tiempo_maximo
        self.numero_programa = numero_programa

    def ejecutar(self, procesos_restantes):
        if self.operacion == '+':
            resultado = sum(self.datos)
        elif self.operacion == '-':
            resultado = self.datos[0] - self.datos[1]
        elif self.operacion == '*':
            resultado = self.datos[0] * self.datos[1]
        elif self.operacion == '/':
            if self.datos[1] == 0:
                print("Error: División por cero.")
                return None
            resultado = self.datos[0] / self.datos[1]
        elif self.operacion == 'residuo':
            if self.datos[1] == 0:
                print("Error: División por cero en la operación de residuo.")
                return None
            resultado = self.datos[0] % self.datos[1]
        print("\n")
        for tiempo_restante in range(int(self.tiempo_maximo), 0, -1):
            sys.stdout.write(f"\rProceso {self.numero} en Ejecución: Tiempo restante - {tiempo_restante} segundos. Procesos restantes: {procesos_restantes}")
            sys.stdout.flush()
            time.sleep(1)
        return resultado

class Lote:
    def __init__(self, numero, procesos):
        self.numero = numero
        self.procesos = procesos

    def ejecutar(self, procesos_restantes):
        tiempo_total = 0
        for proceso in self.procesos:
            resultado = proceso.ejecutar(procesos_restantes)
            if resultado is not None:
                print(f"\nNombre: {proceso.nombre}")
                print(f"Operación: {proceso.operacion}")
                print(f"Tiempo Máximo Estimado: {proceso.tiempo_maximo}")
                print(f"Número de Programa: {proceso.numero_programa}")
                print(f"Resultado de la operación: {resultado}")
                tiempo_total += proceso.tiempo_maximo
                procesos_restantes -= 1

        return tiempo_total

def capturar_proceso(numero_programas):
    nombre = input("Nombre de Programador: ")
    operacion = input("Operación a realizar (+, -, *, /, residuo): ")
    if operacion not in ['+', '-', '*', '/', 'residuo']:
        print("Operación no válida. Inténtelo de nuevo.")
        return capturar_proceso(numero_programas)
    datos = []
    for i in range(2):
        datos.append(float(input(f"Ingrese el dato {i+1}: ")))
    tiempo_maximo = float(input("Tiempo Máximo Estimado (mayor a 0): "))
    if tiempo_maximo <= 0:
        print("Tiempo Máximo Estimado debe ser mayor a 0. Inténtelo de nuevo.")
        return capturar_proceso(numero_programas)
    while True:
        numero_programa = int(input("Número de Programa (ID): "))
        if numero_programa not in numero_programas:
            numero_programas.add(numero_programa)
            break
        else:
            print("El número de programa ya está en uso. Inténtelo de nuevo.")
    print("----------------------------------------------------------------------------------------------------")
    return Proceso(len(numero_programas), nombre, operacion, datos, tiempo_maximo, numero_programa)

def main():
    cantidad_procesos = int(input("Ingrese la cantidad de procesos que desea ingresar: "))
    numero_programas = set()
    lotes_pendientes = []
    tiempo_total_lotes = 0

    for lote_numero in range(1, cantidad_procesos + 1):
        lote_procesos = []
        while len(lote_procesos) < 4 and len(numero_programas) < cantidad_procesos:
            proceso = capturar_proceso(numero_programas)
            lote_procesos.append(proceso)
        lote = Lote(lote_numero, lote_procesos)
        lotes_pendientes.append(lote)

    while lotes_pendientes:
        lote_actual = lotes_pendientes.pop(0)
        procesos_restantes = cantidad_procesos - sum(len(lote.procesos) for lote in lotes_pendientes)
        print(f"\nLote {lote_actual.numero} en Ejecución:")
        tiempo_lote_actual = lote_actual.ejecutar(procesos_restantes)
        tiempo_total_lotes += tiempo_lote_actual

    print("\n\nTiempo total de duración de todos los lotes:", tiempo_total_lotes, "segundos")

if __name__ == "__main__":
    main()